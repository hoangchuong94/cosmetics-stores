generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String        @default(cuid()) @id
  name              String?          
  email             String?       @unique
  emailVerified     DateTime?     @map("email_verified")
  password          String?
  image             String? 
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  role             UserRole      @default(USER) 
  accounts          Account[]

  @@map(name: "users")
}

model Account {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  type              String
  provider          String
  providerAccountId String        @map("provider_account_id")
  refresh_token     String?       @db.Text
  access_token      String?       @db.Text
  expires_at        Int?          
  token_type        String?
  scope             String?
  id_token          String?       @db.Text
  session_state     String?
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Category {
  id                String        @id @default(cuid())
  name              String
  description       String
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  subCategories     SubCategory[]
  products          Product[]
  @@map("categories")
}

model SubCategory {
  id                String        @id @default(cuid())
  name              String
  description       String
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  categoryId        String        @map("category_id")
  category          Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products          Product[]
  
  @@map("sub_categories")
}

model Product {
  id                String        @id @default(cuid())
  name              String
  description       String
  price             Decimal
  style             String
  colors            String[]
  sizes             String[]
  quantity          Int
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  categoryId        String        @map("category_id")
  category          Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategoryId     String        @map("sub_category_id")
  subCategory       SubCategory   @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  
  @@map("products")
  @@unique([name, colors, price, style])
}